var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EventEmitter } from 'events';
import axios from 'axios';
import { getStandardErrorResponse, StandardErrorCodes } from './errors';
import { formatJsonRpcError } from './formatters';
import { parse } from './json';
import { isHttpUrl } from './url';
import { isJsonRpcPayload } from './validators';
export class HttpConnection {
    constructor(url, axiosConfig) {
        this.url = url;
        this.axiosConfig = axiosConfig;
        this.events = new EventEmitter();
        this.api = null;
        this.registering = false;
        if (!isHttpUrl(url)) {
            throw new Error(`Provided URL is not compatible with HTTP connection: ${url}`);
        }
        this.url = url;
    }
    get connected() {
        return !!this.api;
    }
    get connecting() {
        return this.registering;
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    removeListener(event, listener) {
        this.events.removeListener(event, listener);
    }
    open(url = this.url) {
        return __awaiter(this, void 0, void 0, function* () {
            this.api = yield this.register(url);
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            this.onClose();
        });
    }
    send(payload, _context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.api) {
                this.api = yield this.register();
            }
            this.api
                .post('/', payload)
                .then(res => 'id' in payload && this.onPayload(payload.id, res.data))
                .catch(err => 'id' in payload && this.onError(payload.id, err));
        });
    }
    // ---------- Private ----------------------------------------------- //
    register(url = this.url) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!isHttpUrl(url)) {
                throw new Error(`Provided URL is not compatible with HTTP connection: ${url}`);
            }
            if (this.registering) {
                return new Promise((resolve, reject) => {
                    this.events.once('open', () => {
                        if (!this.api) {
                            return reject(new Error('HTTP connection is missing or invalid'));
                        }
                        resolve(this.api);
                    });
                });
            }
            this.url = url;
            this.registering = true;
            const api = axios.create(Object.assign({ baseURL: url, timeout: 30000, headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                } }, this.axiosConfig));
            this.onOpen(api);
            return api;
        });
    }
    onOpen(api) {
        this.api = api;
        this.registering = false;
        this.events.emit('open');
    }
    onClose() {
        this.api = null;
        this.events.emit('close');
    }
    onPayload(id, data) {
        const payload = typeof data === 'string' ? parse(data, {}) : data;
        if (isJsonRpcPayload(payload)) {
            this.events.emit('payload', payload);
        }
        else {
            const error = getStandardErrorResponse(StandardErrorCodes.ParseError);
            const payload = formatJsonRpcError(id, error);
            this.events.emit('payload', payload);
        }
    }
    onError(id, e) {
        const message = e.message;
        const error = Object.assign(Object.assign({}, getStandardErrorResponse(StandardErrorCodes.NetworkError)), { message });
        const payload = formatJsonRpcError(id, error);
        this.events.emit('payload', payload);
    }
}
//# sourceMappingURL=httpConnection.js.map