var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EventEmitter } from 'events';
import { w3cwebsocket as WebSocket } from 'websocket';
import { parse, stringify } from './json';
import { isWsUrl } from './url';
import { isJsonRpcPayload } from './validators';
export class WsConnection {
    constructor(url) {
        this.url = url;
        this.events = new EventEmitter();
        this.socket = null;
        this.registering = false;
        if (!isWsUrl(url)) {
            throw new Error(`Provided URL is not compatible with WebSocket connection: ${url}`);
        }
        this.url = url;
    }
    get connected() {
        return !!this.socket;
    }
    get connecting() {
        return this.registering;
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    removeListener(event, listener) {
        this.events.removeListener(event, listener);
    }
    open(url = this.url) {
        return __awaiter(this, void 0, void 0, function* () {
            this.socket = yield this.register(url);
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.socket) {
                throw new Error('Already disconnected');
            }
            this.socket.close();
            this.onClose();
        });
    }
    send(payload, _context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.socket) {
                this.socket = yield this.register();
            }
            this.socket.send(stringify(payload));
        });
    }
    // ---------- Private ----------------------------------------------- //
    register(url = this.url) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!isWsUrl(url)) {
                throw new Error(`Provided URL is not compatible with WebSocket connection: ${url}`);
            }
            if (this.registering) {
                return new Promise((resolve, reject) => {
                    this.events.once('open', () => {
                        if (!this.socket) {
                            return reject(new Error('WebSocket connection is missing or invalid'));
                        }
                        resolve(this.socket);
                    });
                });
            }
            this.url = url;
            this.registering = true;
            return new Promise((resolve, reject) => {
                const socket = new WebSocket(url);
                socket.onopen = () => {
                    this.onOpen(socket);
                    resolve(socket);
                };
                socket.onerror = error => {
                    this.events.emit('error', error);
                    reject(error);
                };
            });
        });
    }
    onOpen(socket) {
        socket.onmessage = event => this.onPayload(event.data);
        socket.onclose = () => this.onClose();
        this.socket = socket;
        this.registering = false;
        this.events.emit('open');
    }
    onClose() {
        this.socket = null;
        this.events.emit('close');
    }
    onPayload(data) {
        const payload = typeof data === 'string' ? parse(data, {}) : data;
        if (isJsonRpcPayload(payload)) {
            this.events.emit('payload', payload);
        }
    }
}
//# sourceMappingURL=wsConnection.js.map