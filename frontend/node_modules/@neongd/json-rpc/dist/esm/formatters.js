import { getStandardErrorResponse, isValidErrorCode, StandardErrorCodes } from './errors';
let lastPayloadId = 0;
export function payloadId() {
    return ++lastPayloadId;
}
export function formatJsonRpcRequest(method, params, id) {
    return {
        id: id !== null && id !== void 0 ? id : payloadId(),
        jsonrpc: '2.0',
        method,
        params,
    };
}
export function formatJsonRpcNotification(method, params) {
    return {
        jsonrpc: '2.0',
        method,
        params,
    };
}
export function formatJsonRpcResult(id, result) {
    return {
        id,
        jsonrpc: '2.0',
        result,
    };
}
export function formatJsonRpcError(id, error) {
    return {
        id,
        jsonrpc: '2.0',
        error: formatErrorResponse(error),
    };
}
export function formatErrorResponse(error) {
    var _a;
    let code = StandardErrorCodes.InternalError;
    let message = getStandardErrorResponse(code).message;
    let data;
    if (error == null) {
        // noop
    }
    else if (typeof error === 'string') {
        message = error;
    }
    else if (error instanceof Error) {
        code = isValidErrorCode(error.code) ? error.code : code;
        message = error.message;
        data = error.data;
    }
    else {
        code = isValidErrorCode(error.code) ? error.code : code;
        message = (_a = error.message) !== null && _a !== void 0 ? _a : getStandardErrorResponse(code).message;
        data = error.data;
    }
    return { code, message, data };
}
//# sourceMappingURL=formatters.js.map