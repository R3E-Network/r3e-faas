var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EventEmitter } from 'events';
import { parse, stringify } from './json';
import { isJsonRpcPayload } from './validators';
export class PostMessageConnection {
    constructor(postMessage, addMessageListener, topic = '@neongd/json-rpc', logger = null) {
        this.postMessage = postMessage;
        this.addMessageListener = addMessageListener;
        this.topic = topic;
        this.logger = logger;
        this.events = new EventEmitter();
        this.disposer = null;
        this.registering = false;
        this.connected = false;
    }
    get connecting() {
        return this.registering;
    }
    open() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.disposer = (_a = this.addMessageListener(this.onMessage.bind(this))) !== null && _a !== void 0 ? _a : null;
            this.connected = true;
            this.events.emit('open');
        });
    }
    close() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            (_a = this.disposer) === null || _a === void 0 ? void 0 : _a.call(this);
            this.connected = false;
            this.events.emit('close');
        });
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    removeListener(event, listener) {
        this.events.removeListener(event, listener);
    }
    send(payload, _context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger) {
                this.logger.log('postMessage', stringify({ topic: this.topic, payload: payload }));
            }
            this.postMessage(stringify({ topic: this.topic, payload: payload }));
        });
    }
    // ---------- Private ----------------------------------------------- /
    onMessage(message) {
        if (this.logger) {
            this.logger.log('onMessage', message);
        }
        const data = parse(message, null);
        if ((data === null || data === void 0 ? void 0 : data.topic) === this.topic && isJsonRpcPayload(data.payload)) {
            this.events.emit('payload', data.payload);
        }
    }
}
//# sourceMappingURL=postMessageConnection.js.map