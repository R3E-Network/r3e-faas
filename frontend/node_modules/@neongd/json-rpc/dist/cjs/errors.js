"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcError = exports.getStandardErrorResponse = exports.isStandardErrorCode = exports.isValidErrorCode = exports.StandardErrorCodes = void 0;
var StandardErrorCodes;
(function (StandardErrorCodes) {
    StandardErrorCodes[StandardErrorCodes["ParseError"] = -32700] = "ParseError";
    StandardErrorCodes[StandardErrorCodes["InvalidRequest"] = -32600] = "InvalidRequest";
    StandardErrorCodes[StandardErrorCodes["MethodNotFound"] = -32601] = "MethodNotFound";
    StandardErrorCodes[StandardErrorCodes["InvalidParams"] = -32602] = "InvalidParams";
    StandardErrorCodes[StandardErrorCodes["InternalError"] = -32603] = "InternalError";
    StandardErrorCodes[StandardErrorCodes["NetworkError"] = -32000] = "NetworkError";
})(StandardErrorCodes = exports.StandardErrorCodes || (exports.StandardErrorCodes = {}));
const ERROR_MESSAGE_MAP = {
    [StandardErrorCodes.ParseError]: 'Parse error',
    [StandardErrorCodes.InvalidRequest]: 'Invalid Request',
    [StandardErrorCodes.MethodNotFound]: 'Method not found',
    [StandardErrorCodes.InvalidParams]: 'Invalid params',
    [StandardErrorCodes.InternalError]: 'Internal error',
    [StandardErrorCodes.NetworkError]: 'Network error',
};
function isValidErrorCode(code) {
    return typeof code === 'number';
}
exports.isValidErrorCode = isValidErrorCode;
function isStandardErrorCode(code) {
    return Object.values(StandardErrorCodes).includes(code);
}
exports.isStandardErrorCode = isStandardErrorCode;
function getStandardErrorResponse(code) {
    const finalCode = isStandardErrorCode(code) ? code : StandardErrorCodes.InternalError;
    return {
        code: finalCode,
        message: ERROR_MESSAGE_MAP[finalCode],
    };
}
exports.getStandardErrorResponse = getStandardErrorResponse;
class RpcError extends Error {
    constructor(error) {
        super(error.message);
        this.code = error.code;
        this.data = error.data;
    }
}
exports.RpcError = RpcError;
//# sourceMappingURL=errors.js.map