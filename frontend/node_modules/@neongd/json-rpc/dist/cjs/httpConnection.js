"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpConnection = void 0;
const events_1 = require("events");
const axios_1 = __importDefault(require("axios"));
const errors_1 = require("./errors");
const formatters_1 = require("./formatters");
const json_1 = require("./json");
const url_1 = require("./url");
const validators_1 = require("./validators");
class HttpConnection {
    constructor(url, axiosConfig) {
        this.url = url;
        this.axiosConfig = axiosConfig;
        this.events = new events_1.EventEmitter();
        this.api = null;
        this.registering = false;
        if (!url_1.isHttpUrl(url)) {
            throw new Error(`Provided URL is not compatible with HTTP connection: ${url}`);
        }
        this.url = url;
    }
    get connected() {
        return !!this.api;
    }
    get connecting() {
        return this.registering;
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    removeListener(event, listener) {
        this.events.removeListener(event, listener);
    }
    open(url = this.url) {
        return __awaiter(this, void 0, void 0, function* () {
            this.api = yield this.register(url);
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            this.onClose();
        });
    }
    send(payload, _context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.api) {
                this.api = yield this.register();
            }
            this.api
                .post('/', payload)
                .then(res => 'id' in payload && this.onPayload(payload.id, res.data))
                .catch(err => 'id' in payload && this.onError(payload.id, err));
        });
    }
    // ---------- Private ----------------------------------------------- //
    register(url = this.url) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!url_1.isHttpUrl(url)) {
                throw new Error(`Provided URL is not compatible with HTTP connection: ${url}`);
            }
            if (this.registering) {
                return new Promise((resolve, reject) => {
                    this.events.once('open', () => {
                        if (!this.api) {
                            return reject(new Error('HTTP connection is missing or invalid'));
                        }
                        resolve(this.api);
                    });
                });
            }
            this.url = url;
            this.registering = true;
            const api = axios_1.default.create(Object.assign({ baseURL: url, timeout: 30000, headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                } }, this.axiosConfig));
            this.onOpen(api);
            return api;
        });
    }
    onOpen(api) {
        this.api = api;
        this.registering = false;
        this.events.emit('open');
    }
    onClose() {
        this.api = null;
        this.events.emit('close');
    }
    onPayload(id, data) {
        const payload = typeof data === 'string' ? json_1.parse(data, {}) : data;
        if (validators_1.isJsonRpcPayload(payload)) {
            this.events.emit('payload', payload);
        }
        else {
            const error = errors_1.getStandardErrorResponse(errors_1.StandardErrorCodes.ParseError);
            const payload = formatters_1.formatJsonRpcError(id, error);
            this.events.emit('payload', payload);
        }
    }
    onError(id, e) {
        const message = e.message;
        const error = Object.assign(Object.assign({}, errors_1.getStandardErrorResponse(errors_1.StandardErrorCodes.NetworkError)), { message });
        const payload = formatters_1.formatJsonRpcError(id, error);
        this.events.emit('payload', payload);
    }
}
exports.HttpConnection = HttpConnection;
//# sourceMappingURL=httpConnection.js.map