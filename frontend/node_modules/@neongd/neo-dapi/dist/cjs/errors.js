"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDapiErrorResponse = exports.isDapiErrorCode = exports.DapiErrorCodes = void 0;
const json_rpc_1 = require("@neongd/json-rpc");
var DapiErrorCodes;
(function (DapiErrorCodes) {
    DapiErrorCodes[DapiErrorCodes["UserRejected"] = -32001] = "UserRejected";
    DapiErrorCodes[DapiErrorCodes["UnsupportedNetwork"] = -32002] = "UnsupportedNetwork";
    DapiErrorCodes[DapiErrorCodes["NoAccount"] = -32003] = "NoAccount";
    DapiErrorCodes[DapiErrorCodes["InsufficientFunds"] = -32004] = "InsufficientFunds";
    DapiErrorCodes[DapiErrorCodes["RemoteRpcError"] = -32005] = "RemoteRpcError";
})(DapiErrorCodes = exports.DapiErrorCodes || (exports.DapiErrorCodes = {}));
const ERROR_MESSAGE_MAP = {
    [DapiErrorCodes.UserRejected]: 'User rejected',
    [DapiErrorCodes.UnsupportedNetwork]: 'Unsupported network',
    [DapiErrorCodes.NoAccount]: 'No account',
    [DapiErrorCodes.InsufficientFunds]: 'Insufficient funds',
    [DapiErrorCodes.RemoteRpcError]: 'Remote rpc error',
};
function isDapiErrorCode(code) {
    return Object.values(DapiErrorCodes).includes(code);
}
exports.isDapiErrorCode = isDapiErrorCode;
function getDapiErrorResponse(code) {
    if (isDapiErrorCode(code)) {
        return {
            code,
            message: ERROR_MESSAGE_MAP[code],
        };
    }
    return json_rpc_1.getStandardErrorResponse(json_rpc_1.StandardErrorCodes.InternalError);
}
exports.getDapiErrorResponse = getDapiErrorResponse;
//# sourceMappingURL=errors.js.map