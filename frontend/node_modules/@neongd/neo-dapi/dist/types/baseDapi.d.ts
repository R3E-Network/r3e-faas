import { Provider } from '@neongd/neo-provider';
import { Account, ApplicationLog, Argument, Attribute, Block, Dapi, Invocation, Nep17Balance, Networks, ProviderInformation, Signer, Transaction } from './types';
export declare class BaseDapi implements Dapi {
    protected provider: Provider;
    constructor(provider: Provider);
    getProvider(): Promise<ProviderInformation>;
    getNetworks(): Promise<Networks>;
    getAccount(): Promise<Account>;
    getBlockCount(params: {
        network?: string;
    }): Promise<number>;
    getBlock(params: {
        blockIndex: number;
        network?: string;
    }): Promise<Block>;
    getTransaction(params: {
        txid: string;
        network?: string;
    }): Promise<Transaction>;
    getApplicationLog(params: {
        txid: string;
        network?: string;
    }): Promise<ApplicationLog>;
    getStorage(params: {
        scriptHash: string;
        key: string;
        network?: string;
    }): Promise<string>;
    getNep17Balances(params: {
        address: string;
        network?: string;
    }): Promise<Nep17Balance[]>;
    invokeRead(params: {
        scriptHash: string;
        operation: string;
        args?: Argument[];
        signers?: Signer[];
        network?: string;
    }): Promise<{
        script: string;
        state: string;
        exception: string | null;
        gasConsumed: string;
        stack: Argument[];
    }>;
    invokeReadMulti(params: {
        invocations: Invocation[];
        signers?: Signer[];
        network?: string;
    }): Promise<{
        script: string;
        state: string;
        exception: string | null;
        gasConsumed: string;
        stack: Argument[];
    }>;
    invoke(params: {
        scriptHash: string;
        operation: string;
        args?: Argument[];
        attributes?: Attribute[];
        signers?: Signer[];
        network?: string;
        extraSystemFee?: string;
        extraNetworkFee?: string;
        broadcastOverride?: boolean;
    }): Promise<{
        txid: string;
        nodeUrl?: string;
        signedTx?: string;
    }>;
    invokeMulti(params: {
        invocations: Invocation[];
        attributes?: Attribute[];
        signers?: Signer[];
        network?: string;
        extraSystemFee?: string;
        extraNetworkFee?: string;
        broadcastOverride?: boolean;
    }): Promise<{
        txid: string;
        nodeUrl?: string;
        signedTx?: string;
    }>;
    signMessage(params: {
        message: string;
    }): Promise<{
        salt: string;
        signature: string;
        publicKey: string;
    }>;
    signMessageWithoutSalt(params: {
        message: string;
    }): Promise<{
        signature: string;
        publicKey: string;
    }>;
    signTransaction(params: {
        version: number;
        nonce: number;
        systemFee: string;
        networkFee: string;
        validUntilBlock: number;
        script: string;
        invocations?: Invocation[];
        attributes?: Attribute[];
        signers?: Signer[];
        network?: string;
    }): Promise<{
        signature: string;
        publicKey: string;
    }>;
    relayTransaction(params: {
        signedTx: string;
        network?: string;
    }): Promise<{
        txid: string;
        nodeUrl: string;
    }>;
}
