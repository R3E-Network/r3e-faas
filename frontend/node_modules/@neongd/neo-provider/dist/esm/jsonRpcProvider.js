import { EventEmitter } from 'events';
import { RpcError } from '@neongd/json-rpc';
export * from './types';
export class JsonRpcProvider {
    constructor(transport) {
        this.transport = transport;
        this.events = new EventEmitter();
        this.registerEventListeners();
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    removeListener(event, listener) {
        this.events.removeListener(event, listener);
    }
    request(args) {
        return this.transport.request(args);
    }
    registerEventListeners() {
        this.transport.on('disconnect', () => {
            this.transport.connect();
        });
        this.transport.on('notification', (notification) => this.onNotification(notification));
    }
    onNotification(notification) {
        const providerEvents = ['connect', 'disconnect', 'message', 'networkChanged', 'accountChanged'];
        if (providerEvents.includes(notification.method)) {
            if (notification.method === 'disconnect' && notification.params != null) {
                this.events.emit(notification.method, new RpcError(notification.params));
            }
            else {
                this.events.emit(notification.method, notification.params);
            }
        }
    }
}
//# sourceMappingURL=jsonRpcProvider.js.map