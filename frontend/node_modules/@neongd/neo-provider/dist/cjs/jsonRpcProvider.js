"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonRpcProvider = void 0;
const events_1 = require("events");
const json_rpc_1 = require("@neongd/json-rpc");
__exportStar(require("./types"), exports);
class JsonRpcProvider {
    constructor(transport) {
        this.transport = transport;
        this.events = new events_1.EventEmitter();
        this.registerEventListeners();
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    removeListener(event, listener) {
        this.events.removeListener(event, listener);
    }
    request(args) {
        return this.transport.request(args);
    }
    registerEventListeners() {
        this.transport.on('disconnect', () => {
            this.transport.connect();
        });
        this.transport.on('notification', (notification) => this.onNotification(notification));
    }
    onNotification(notification) {
        const providerEvents = ['connect', 'disconnect', 'message', 'networkChanged', 'accountChanged'];
        if (providerEvents.includes(notification.method)) {
            if (notification.method === 'disconnect' && notification.params != null) {
                this.events.emit(notification.method, new json_rpc_1.RpcError(notification.params));
            }
            else {
                this.events.emit(notification.method, notification.params);
            }
        }
    }
}
exports.JsonRpcProvider = JsonRpcProvider;
//# sourceMappingURL=jsonRpcProvider.js.map