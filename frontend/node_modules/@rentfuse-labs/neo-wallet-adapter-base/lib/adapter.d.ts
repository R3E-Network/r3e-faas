import EventEmitter from 'eventemitter3';
import { WalletError } from './errors';
export { EventEmitter };
export declare enum WitnessScope {
    None = 0,
    CalledByEntry = 1,
    CustomContracts = 16,
    CustomGroups = 32,
    Global = 128
}
export declare type Signer = {
    account: string;
    scopes: WitnessScope;
    allowedContracts?: string[];
    allowedGroups?: string[];
};
export declare type StackItemType = 'Any' | 'Pointer' | 'Boolean' | 'Integer' | 'ByteString' | 'Buffer' | 'Array' | 'Struct' | 'Map' | 'InteropInterface';
export declare type StackItem = {
    type: StackItemType;
    value?: any;
};
export declare type ArgumentType = 'Any' | 'Boolean' | 'Integer' | 'ByteArray' | 'String' | 'Hash160' | 'Hash256' | 'PublicKey' | 'Signature' | 'Array' | 'Map' | 'InteropInterface' | 'Void';
export declare type Argument = {
    type: ArgumentType;
    value: any;
};
export declare type ContractReadInvocation = {
    scriptHash: string;
    operation: string;
    args: Argument[];
    abortOnFail?: boolean;
    signers?: Signer[];
};
export declare type ContractReadInvocationMulti = {
    invocations: ContractReadInvocation[];
    signers: Signer[];
};
export declare type ContractWriteOptions = {
    fee?: string;
    extraSystemFee?: string;
    broadcastOverride?: boolean;
};
export declare type ContractWriteInvocation = ContractReadInvocation & ContractWriteOptions;
export declare type ContractWriteInvocationMulti = {
    invocations: ContractReadInvocation[];
    signers: Signer[];
} & ContractWriteOptions;
export declare type ContractReadInvocationResultData = {
    script: string;
    state: 'HALT' | 'FAULT';
    gasConsumed: string;
    stack: StackItem[];
    exception?: any;
    tx?: string;
};
export declare type ContractWriteInvocationResultData = {
    txId: string;
};
export declare type ContractReadInvocationResult = {
    status: 'success' | 'fail' | 'error';
    data?: ContractReadInvocationResultData | null;
    message?: string;
    code?: string;
};
export declare type ContractWriteInvocationResult = {
    status: 'success' | 'fail' | 'error';
    data?: ContractWriteInvocationResultData | null;
    message?: string;
    code?: string;
};
export declare type GetNetworksResultData = {
    networks: string[];
    defaultNetwork: string;
};
export declare type GetNetworksInvocationResult = {
    status: 'success' | 'fail' | 'error';
    data?: GetNetworksResultData | null;
    message?: string;
    code?: string;
};
export declare type SignMessageInvocation = {
    message: string;
    version?: number;
};
export declare type SignMessageResultData = {
    publicKey: string;
    data: string;
    salt: string;
    message: string;
};
export declare type SignMessageInvocationResult = {
    status: 'success' | 'fail' | 'error';
    data?: SignMessageResultData | null;
    message?: string;
    code?: string;
};
export interface WalletAdapterEvents {
    ready(): void;
    connect(): void;
    disconnect(): void;
    error(error: WalletError): void;
}
export interface WalletAdapterProps {
    address: string | null;
    ready: boolean;
    connecting: boolean;
    connected: boolean;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    invokeRead(request: ContractReadInvocation): Promise<ContractReadInvocationResult>;
    invokeReadMulti(request: ContractReadInvocationMulti): Promise<ContractReadInvocationResult>;
    invoke(request: ContractWriteInvocation): Promise<ContractWriteInvocationResult>;
    invokeMulti(request: ContractWriteInvocationMulti): Promise<ContractWriteInvocationResult>;
    getNetworks(): Promise<GetNetworksInvocationResult>;
    signMessage(request: SignMessageInvocation): Promise<SignMessageInvocationResult>;
}
export declare type WalletAdapter = WalletAdapterProps & EventEmitter<WalletAdapterEvents>;
export declare abstract class BaseWalletAdapter extends EventEmitter<WalletAdapterEvents> implements WalletAdapter {
    abstract address: string | null;
    abstract ready: boolean;
    abstract connecting: boolean;
    abstract connected: boolean;
    abstract connect(): Promise<void>;
    abstract disconnect(): Promise<void>;
    abstract invokeRead(request: ContractReadInvocation): Promise<ContractReadInvocationResult>;
    abstract invokeReadMulti(request: ContractReadInvocationMulti): Promise<ContractReadInvocationResult>;
    abstract invoke(request: ContractWriteInvocation): Promise<ContractWriteInvocationResult>;
    abstract invokeMulti(request: ContractWriteInvocationMulti): Promise<ContractWriteInvocationResult>;
    abstract getNetworks(): Promise<GetNetworksInvocationResult>;
    abstract signMessage(request: SignMessageInvocation): Promise<SignMessageInvocationResult>;
}
