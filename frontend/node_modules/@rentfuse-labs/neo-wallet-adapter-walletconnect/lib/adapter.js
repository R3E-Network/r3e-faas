var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { u } from '@cityofzion/neon-js';
import WcSdk from '@cityofzion/wallet-connect-sdk-core';
import { BaseWalletAdapter, WalletAccountError, WalletConnectionError, WalletDisconnectionError, WalletError, WalletNotConnectedError, } from '@rentfuse-labs/neo-wallet-adapter-base';
import SignClient from '@walletconnect/sign-client';
export class WalletConnectWalletAdapter extends BaseWalletAdapter {
    constructor(config, neonWallet) {
        super();
        this._methods = ['invokeFunction', 'testInvoke', 'signMessage', 'verifyMessage'];
        this._walletConnectChains = ['neo3:mainnet', 'neo3:testnet', 'neo3:private'];
        // Arrow function to bind this correctly and be similar to other wallets
        this._disconnected = () => {
            this.disconnect();
        };
        this._address = null;
        this._connecting = false;
        this._options = config.options;
        this._network = config.network;
        if (config.methods)
            this._methods = config.methods;
        this._neonWallet = neonWallet ? neonWallet : false;
    }
    get address() {
        return this._address;
    }
    get ready() {
        return typeof window !== 'undefined';
    }
    get connecting() {
        return this._connecting;
    }
    get connected() {
        return !!this._address;
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.connected || this.connecting)
                    return;
                this._connecting = true;
                let walletConnectInstance;
                try {
                    // Create walletconnect coz instance and initialize client
                    walletConnectInstance = new WcSdk(yield SignClient.init(this._options));
                    // Load any existing connection, it should be called after the initialization, to reestablish connections made previously
                    yield walletConnectInstance.manageSession();
                    // If the session has not been loaded try to load it
                    if (!walletConnectInstance.isConnected()) {
                        // If we're here we need to connect
                        yield walletConnectInstance.connect(this._network, this._methods);
                    }
                }
                catch (error) {
                    if (error instanceof WalletError)
                        throw error;
                    throw new WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);
                }
                if (!walletConnectInstance.isConnected())
                    throw new WalletAccountError();
                this._address = walletConnectInstance.getAccountAddress();
                this._walletConnectInstance = walletConnectInstance;
                this.emit('connect');
            }
            catch (error) {
                this.emit('error', error);
                throw error;
            }
            finally {
                this._connecting = false;
            }
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            const walletConnectInstance = this._walletConnectInstance;
            if (walletConnectInstance && walletConnectInstance.session) {
                try {
                    yield walletConnectInstance.disconnect();
                }
                catch (error) {
                    this.emit('error', new WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));
                }
                finally {
                    this._address = null;
                    this._walletConnectInstance = undefined;
                }
            }
            this.emit('disconnect');
        });
    }
    invokeRead(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const walletConnectInstance = this._walletConnectInstance;
            if (!walletConnectInstance || !walletConnectInstance.session)
                throw new WalletNotConnectedError();
            try {
                const response = yield walletConnectInstance.testInvoke({
                    signers: request.signers,
                    invocations: [
                        {
                            scriptHash: request.scriptHash,
                            operation: request.operation,
                            args: this._normalizeArgs(request.args),
                            abortOnFail: request.abortOnFail,
                        },
                    ],
                });
                return this._responseToReadResult(response);
            }
            catch (error) {
                this.emit('error', error);
                throw error;
            }
        });
    }
    invokeReadMulti(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const walletConnectInstance = this._walletConnectInstance;
            if (!walletConnectInstance || !walletConnectInstance.session)
                throw new WalletNotConnectedError();
            try {
                const response = yield walletConnectInstance.testInvoke({
                    signers: request.signers,
                    invocations: request.invocations.map((invocation) => (Object.assign(Object.assign({}, invocation), { args: this._normalizeArgs(invocation.args) }))),
                });
                return this._responseToReadResult(response);
            }
            catch (error) {
                this.emit('error', error);
                throw error;
            }
        });
    }
    invoke(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const walletConnectInstance = this._walletConnectInstance;
            if (!walletConnectInstance || !walletConnectInstance.session)
                throw new WalletNotConnectedError();
            try {
                // Remember gas fee conversion with 8 decimals as it's passed as float in input request param
                const response = yield walletConnectInstance.invokeFunction({
                    signers: request.signers,
                    invocations: [
                        {
                            scriptHash: request.scriptHash,
                            operation: request.operation,
                            args: this._normalizeArgs(request.args),
                            abortOnFail: request.abortOnFail,
                        },
                    ],
                    extraNetworkFee: request.fee ? +request.fee * 100000000 : undefined,
                    extraSystemFee: request.extraSystemFee ? +request.extraSystemFee * 100000000 : undefined,
                });
                return this._responseToWriteResult(response);
            }
            catch (error) {
                this.emit('error', error);
                throw error;
            }
        });
    }
    invokeMulti(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const walletConnectInstance = this._walletConnectInstance;
            if (!walletConnectInstance || !walletConnectInstance.session)
                throw new WalletNotConnectedError();
            try {
                // Remember gas fee conversion with 8 decimals as it's passed as float in input request param
                const response = yield walletConnectInstance.invokeFunction({
                    signers: request.signers,
                    invocations: request.invocations.map((invocation) => (Object.assign(Object.assign({}, invocation), { args: this._normalizeArgs(invocation.args) }))),
                    extraNetworkFee: request.fee ? +request.fee * 100000000 : undefined,
                    extraSystemFee: request.extraSystemFee ? +request.extraSystemFee * 100000000 : undefined,
                });
                return this._responseToWriteResult(response);
            }
            catch (error) {
                this.emit('error', error);
                throw error;
            }
        });
    }
    getNetworks() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const walletConnectInstance = this._walletConnectInstance;
                if (!walletConnectInstance || !walletConnectInstance.session)
                    throw new WalletNotConnectedError();
                return this._responseToGetNetworksResult();
            }
            catch (error) {
                this.emit('error', error);
                throw error;
            }
        });
    }
    signMessage(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const walletConnectInstance = this._walletConnectInstance;
            if (!walletConnectInstance || !walletConnectInstance.session)
                throw new WalletNotConnectedError();
            try {
                const response = yield walletConnectInstance.signMessage({
                    message: request.message,
                    version: (request === null || request === void 0 ? void 0 : request.version) || 1,
                });
                return this._responseToSignMessageResult(response);
            }
            catch (error) {
                this.emit('error', error);
                throw error;
            }
        });
    }
    _responseToReadResult(response) {
        // If the state is halt it means that everything went well
        if (response.state === 'HALT') {
            return {
                status: 'success',
                data: Object.assign({}, response),
            };
        }
        // Otherwise an error occurred and so return it
        return {
            status: 'error',
            message: response.exception || '',
            code: response.exception || '',
        };
    }
    _responseToWriteResult(response) {
        return {
            status: 'success',
            data: {
                txId: response,
            },
        };
    }
    _responseToGetNetworksResult() {
        return {
            status: 'success',
            data: {
                networks: this._walletConnectChains,
                defaultNetwork: this._network,
            },
        };
    }
    _responseToSignMessageResult(response) {
        return {
            status: 'success',
            data: {
                publicKey: response.publicKey,
                data: response.data,
                salt: response.salt || '',
                message: response.messageHex,
            },
        };
    }
    _normalizeArgs(args) {
        // Needed because walletconnect accepts only an hexstring and not a base64 string
        return args.map((arg) => {
            if (arg.type === 'ByteArray') {
                // Must convert standard base64 to hex
                return { type: arg.type, value: u.base642hex(arg.value) };
            }
            if (arg.type === 'Array') {
                return { type: arg.type, value: this._normalizeArgs(arg.value) };
            }
            return arg;
        });
    }
}
//# sourceMappingURL=adapter.js.map