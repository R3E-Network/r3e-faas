import { Method, NetworkType } from '@cityofzion/wallet-connect-sdk-core';
import { BaseWalletAdapter, ContractReadInvocation, ContractReadInvocationMulti, ContractReadInvocationResult, ContractWriteInvocation, ContractWriteInvocationMulti, ContractWriteInvocationResult, GetNetworksInvocationResult, SignMessageInvocation, SignMessageInvocationResult } from '@rentfuse-labs/neo-wallet-adapter-base';
import { SignClientTypes } from '@walletconnect/types';
export interface WalletConnectWalletAdapterConfig {
    options: SignClientTypes.Options;
    network: NetworkType;
    methods?: Method[];
}
export declare class WalletConnectWalletAdapter extends BaseWalletAdapter {
    private _address;
    private _connecting;
    private _options;
    private _network;
    private _neonWallet;
    private _methods;
    private _walletConnectInstance;
    private _walletConnectChains;
    constructor(config: WalletConnectWalletAdapterConfig, neonWallet?: boolean);
    get address(): string | null;
    get ready(): boolean;
    get connecting(): boolean;
    get connected(): boolean;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    invokeRead(request: ContractReadInvocation): Promise<ContractReadInvocationResult>;
    invokeReadMulti(request: ContractReadInvocationMulti): Promise<ContractReadInvocationResult>;
    invoke(request: ContractWriteInvocation): Promise<ContractWriteInvocationResult>;
    invokeMulti(request: ContractWriteInvocationMulti): Promise<ContractWriteInvocationResult>;
    getNetworks(): Promise<GetNetworksInvocationResult>;
    signMessage(request: SignMessageInvocation): Promise<SignMessageInvocationResult>;
    private _responseToReadResult;
    private _responseToWriteResult;
    private _responseToGetNetworksResult;
    private _responseToSignMessageResult;
    private _normalizeArgs;
    private _disconnected;
}
