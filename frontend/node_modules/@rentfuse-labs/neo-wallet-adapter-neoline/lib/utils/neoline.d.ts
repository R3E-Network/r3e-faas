export declare enum NeoLineScope {
    None = 0,
    CalledByEntry = 1,
    CustomContracts = 16,
    CustomGroups = 32,
    Global = 128
}
export declare enum NeoLineChainId {
    Neo2MainNet = 1,
    Neo2TestNet = 2,
    Neo3MainNet = 3,
    Neo3TestNet = 4
}
export declare type NeoLineAccount = {
    address: string;
    label?: string;
};
export declare type NeoLineNetworks = {
    chainId: NeoLineChainId;
    defaultNetwork: string;
    networks: string[];
};
export declare type NeoLineSigner = {
    account: string;
    scopes: number;
    allowedContracts?: string[];
    allowedGroups?: string[];
};
export declare type NeoLineStackItemType = 'Any' | 'Pointer' | 'Boolean' | 'Integer' | 'ByteString' | 'Buffer' | 'Array' | 'Struct' | 'Map' | 'InteropInterface';
export declare type NeoLineStackItem = {
    type: NeoLineStackItemType;
    value?: any;
};
export declare type NeoLineArgumentType = 'Any' | 'Boolean' | 'Integer' | 'ByteArray' | 'String' | 'Hash160' | 'Hash256' | 'PublicKey' | 'Signature' | 'Array' | 'Map' | 'InteropInterface' | 'Void';
export declare type NeoLineArgument = {
    type: NeoLineArgumentType;
    value: any;
};
export declare type NeoLineInvokeReadInvocation = {
    scriptHash: string;
    operation: string;
    args: NeoLineArgument[];
};
export declare type NeoLineInvokeWriteInvocation = {
    fee?: string;
    extraSystemFee?: string;
    broadcastOverride?: boolean;
};
export declare type NeoLineReadInvocationResult = {
    script: string;
    state: 'HALT' | 'FAULT';
    gas_consumed: string;
    stack: NeoLineStackItem[];
};
export declare type NeoLineWriteInvocationResult = {
    txid: string;
    nodeURL?: string;
    signedTx?: string;
};
export declare type NeoLineSignMessageInvocation = {
    message: string;
};
export declare type NeoLineSignMessageInvocationResult = {
    publicKey: string;
    data: string;
    salt: string;
    message: string;
};
export declare function NeoLineN3Init(): Promise<NeoLineN3Interface>;
export declare function NeoLineInit(): Promise<NeoLineInterface>;
export interface NeoLineN3Interface {
    getAccount(): Promise<NeoLineAccount>;
    invokeRead(params: NeoLineInvokeReadInvocation & {
        signers: NeoLineSigner[];
    }): Promise<NeoLineReadInvocationResult>;
    invokeReadMulti(params: {
        invokeReadArgs: NeoLineInvokeReadInvocation[];
    } & {
        signers: NeoLineSigner[];
    }): Promise<NeoLineReadInvocationResult>;
    invoke(params: NeoLineInvokeReadInvocation & NeoLineInvokeWriteInvocation & {
        signers: NeoLineSigner[];
    }): Promise<NeoLineWriteInvocationResult>;
    invokeMultiple(params: {
        invokeArgs: NeoLineInvokeReadInvocation[];
    } & NeoLineInvokeWriteInvocation & {
        signers: NeoLineSigner[];
    }): Promise<NeoLineWriteInvocationResult>;
    signMessage(params: NeoLineSignMessageInvocation): Promise<NeoLineSignMessageInvocationResult>;
}
export interface NeoLineInterface {
    getNetworks(): Promise<NeoLineNetworks>;
}
