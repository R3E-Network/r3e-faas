var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export var NeoLineScope;
(function (NeoLineScope) {
    NeoLineScope[NeoLineScope["None"] = 0] = "None";
    NeoLineScope[NeoLineScope["CalledByEntry"] = 1] = "CalledByEntry";
    NeoLineScope[NeoLineScope["CustomContracts"] = 16] = "CustomContracts";
    NeoLineScope[NeoLineScope["CustomGroups"] = 32] = "CustomGroups";
    NeoLineScope[NeoLineScope["Global"] = 128] = "Global";
})(NeoLineScope || (NeoLineScope = {}));
export var NeoLineChainId;
(function (NeoLineChainId) {
    NeoLineChainId[NeoLineChainId["Neo2MainNet"] = 1] = "Neo2MainNet";
    NeoLineChainId[NeoLineChainId["Neo2TestNet"] = 2] = "Neo2TestNet";
    NeoLineChainId[NeoLineChainId["Neo3MainNet"] = 3] = "Neo3MainNet";
    NeoLineChainId[NeoLineChainId["Neo3TestNet"] = 4] = "Neo3TestNet";
})(NeoLineChainId || (NeoLineChainId = {}));
export function NeoLineN3Init() {
    return __awaiter(this, void 0, void 0, function* () {
        // Use an async pattern as the global NEOLineN3 is not available while
        // the NEOLine.NEO.EVENT.READY event is still firing:
        return new Promise((resolve) => setTimeout(() => {
            resolve(new window.NEOLineN3.Init());
        }, 10));
    });
}
export function NeoLineInit() {
    return __awaiter(this, void 0, void 0, function* () {
        // Use an async pattern as the global NEOLineN3 is not available while
        // the NEOLine.NEO.EVENT.READY event is still firing:
        return new Promise((resolve) => setTimeout(() => {
            resolve(new window.NEOLine.Init());
        }, 10));
    });
}
//# sourceMappingURL=neoline.js.map