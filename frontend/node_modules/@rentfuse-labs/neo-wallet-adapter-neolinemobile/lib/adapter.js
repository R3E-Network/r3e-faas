var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { BaseDapi } from '@neongd/neo-dapi';
import { BaseWalletAdapter, pollUntilReady, WalletAccountError, WalletConnectionError, WalletDisconnectionError, WalletError, WalletMethodNotSupportedError, WalletNotConnectedError, WitnessScope, } from '@rentfuse-labs/neo-wallet-adapter-base';
const DEFAULT_WALLET_CONFIG = { options: null };
// Same as OneGate
export class NeoLineMobileWalletAdapter extends BaseWalletAdapter {
    constructor(config = DEFAULT_WALLET_CONFIG) {
        super();
        // Arrow function to bind this correctly in event listener
        this._disconnected = () => {
            this.disconnect();
        };
        this._address = null;
        this._connecting = false;
        this._options = config.options;
        if (!this.ready)
            pollUntilReady(this, config.pollInterval || 1000, config.pollCount || 3);
    }
    get address() {
        return this._address;
    }
    get ready() {
        return typeof window !== 'undefined' && window.NeoLineMobile !== 'undefined';
    }
    get connecting() {
        return this._connecting;
    }
    get connected() {
        return !!this._address;
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.connected || this.connecting)
                    return;
                this._connecting = true;
                try {
                    // Search for an available provider
                    this._oneGateProvider = window.NeoLineMobile;
                    // If set init the dapi
                    if (this._oneGateProvider) {
                        // Get the neoline client initializing the wallet
                        this._oneGateDapi = new BaseDapi(this._oneGateProvider);
                    }
                }
                catch (error) {
                    if (error instanceof WalletError)
                        throw error;
                    throw new WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);
                }
                if (!this._oneGateDapi || !this._oneGateProvider)
                    throw new WalletAccountError();
                // Taken from https://github.com/neo-ngd/neo-dapi-monorepo/tree/master/packages/neo-dapi
                let account;
                try {
                    // NeoLineMobile asks the user to connect the dapp when calling the getAccount method
                    account = yield this._oneGateDapi.getAccount();
                }
                catch (error) {
                    throw new WalletAccountError(error === null || error === void 0 ? void 0 : error.message, error);
                }
                if (!account)
                    throw new WalletAccountError();
                this._address = account.address;
                // Add a listener to cleanup of disconnection
                this._oneGateProvider.on('disconnect', this._disconnected);
                this._oneGateProvider.on('accountChanged', this._disconnected);
                this._oneGateProvider.on('networkChanged', this._disconnected);
                this.emit('connect');
            }
            catch (error) {
                this.emit('error', error);
                throw error;
            }
            finally {
                this._connecting = false;
            }
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            const client = this._oneGateDapi;
            const provider = this._oneGateProvider;
            if (client && provider) {
                try {
                    // TODO: How?
                    //await this._oneGateDapi.disconnect();
                    provider.removeListener('disconnect', this._disconnected);
                    provider.removeListener('accountChanged', this._disconnected);
                    provider.removeListener('networkChanged', this._disconnected);
                    this._address = null;
                    this._oneGateDapi = undefined;
                    this._oneGateProvider = undefined;
                }
                catch (error) {
                    this.emit('error', new WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));
                }
            }
            this.emit('disconnect');
        });
    }
    invokeRead(request) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const client = this._oneGateDapi;
            if (!client)
                throw new WalletNotConnectedError();
            try {
                const response = yield client.invokeRead({
                    scriptHash: request.scriptHash,
                    operation: request.operation,
                    args: request.args,
                    signers: (_a = request.signers) === null || _a === void 0 ? void 0 : _a.map((_signer) => this._normalizeSigner(_signer)),
                });
                return this._responseToReadResult(response);
            }
            catch (error) {
                this.emit('error', error);
                throw error;
            }
        });
    }
    invokeReadMulti(request) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const client = this._oneGateDapi;
            if (!client)
                throw new WalletNotConnectedError();
            try {
                const response = yield client.invokeReadMulti({
                    invocations: request.invocations,
                    signers: (_a = request.signers) === null || _a === void 0 ? void 0 : _a.map((_signer) => this._normalizeSigner(_signer)),
                });
                return this._responseToReadResult(response);
            }
            catch (error) {
                this.emit('error', error);
                throw error;
            }
        });
    }
    invoke(request) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const client = this._oneGateDapi;
            if (!client)
                throw new WalletNotConnectedError();
            try {
                // Remember gas fee conversion with 8 decimals as it's passed as float in input request param
                const response = yield client.invoke({
                    scriptHash: request.scriptHash,
                    operation: request.operation,
                    args: request.args,
                    signers: (_a = request.signers) === null || _a === void 0 ? void 0 : _a.map((_signer) => this._normalizeSigner(_signer)),
                    extraNetworkFee: request.fee ? (+request.fee * 100000000).toString() : undefined,
                    extraSystemFee: request.extraSystemFee ? (+request.extraSystemFee * 100000000).toString() : undefined,
                    broadcastOverride: request.broadcastOverride,
                });
                return this._responseToWriteResult(response);
            }
            catch (error) {
                this.emit('error', error);
                throw error;
            }
        });
    }
    invokeMulti(request) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const client = this._oneGateDapi;
            if (!client)
                throw new WalletNotConnectedError();
            try {
                // Remember gas fee conversion with 8 decimals as it's passed as float in input request param
                const response = yield client.invokeMulti({
                    invocations: request.invocations,
                    signers: (_a = request.signers) === null || _a === void 0 ? void 0 : _a.map((_signer) => this._normalizeSigner(_signer)),
                    extraNetworkFee: request.fee ? (+request.fee * 100000000).toString() : undefined,
                    extraSystemFee: request.extraSystemFee ? (+request.extraSystemFee * 100000000).toString() : undefined,
                    broadcastOverride: request.broadcastOverride,
                });
                return this._responseToWriteResult(response);
            }
            catch (error) {
                this.emit('error', error);
                throw error;
            }
        });
    }
    getNetworks() {
        return __awaiter(this, void 0, void 0, function* () {
            const client = this._oneGateDapi;
            if (!client)
                throw new WalletNotConnectedError();
            try {
                const response = yield client.getNetworks();
                return this._responseToGetNetworksResult(response);
            }
            catch (error) {
                this.emit('error', error);
                throw error;
            }
        });
    }
    signMessage(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const client = this._oneGateDapi;
            if (!client)
                throw new WalletNotConnectedError();
            // Not currently supported by Neo dAPI
            const error = {
                message: 'API method not supported',
                error: new Error('API method not supported'),
                name: 'MethodNotSupportedError',
            };
            this.emit('error', new WalletMethodNotSupportedError());
            throw error;
        });
    }
    _responseToReadResult(response) {
        // If the state is halt it means that everything went well
        if (response.state === 'HALT') {
            return {
                status: 'success',
                data: {
                    script: response.script,
                    state: response.state,
                    gasConsumed: response.gas_consumed,
                    exception: null,
                    stack: response.stack,
                },
            };
        }
        // Otherwise an error occurred and so return it
        // TODO: message and code where?
        return {
            status: 'error',
            message: undefined,
            code: undefined,
        };
    }
    _responseToWriteResult(response) {
        return {
            status: 'success',
            data: {
                txId: response.txid,
            },
        };
    }
    _responseToGetNetworksResult(response) {
        return {
            status: 'success',
            data: {
                networks: response.networks,
                defaultNetwork: response.defaultNetwork,
            },
        };
    }
    _normalizeSigner(signer) {
        let scopes = '';
        if (signer.scopes & WitnessScope.None)
            scopes += 'None';
        if (signer.scopes & WitnessScope.CalledByEntry)
            scopes += (scopes.length ? ',' : '') + 'CalledByEntry';
        if (signer.scopes & WitnessScope.CustomContracts)
            scopes += (scopes.length ? ',' : '') + 'CustomContracts';
        if (signer.scopes & WitnessScope.CustomGroups)
            scopes += (scopes.length ? ',' : '') + 'CustomGroups';
        if (signer.scopes & WitnessScope.Global)
            scopes += (scopes.length ? ',' : '') + 'Global';
        return Object.assign(Object.assign({}, signer), { scopes });
    }
}
//# sourceMappingURL=adapter.js.map